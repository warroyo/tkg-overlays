#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")


#@ def merge_labels(pool):
#@   predefined_labels = {"node-pool": "{}-{}".format(data.values.CLUSTER_NAME,pool.name)}
#@   labels = {}
#@   if hasattr(pool, "labels"):
#@     labels.update(pool.labels)
#@   end
#@   labels.update(predefined_labels)
#@   return labels
#@ end


#@ if data.values.EXTRA_NODE_POOLS:

#@ for i in data.values.extrapools:

#@ autoscaler_min_size = getattr(i, "autoscaler_min_size",  i.replicas)
#@ autoscaler_max_size = getattr(i, "autoscaler_max_size",  i.replicas)

#@ diskSize =  getattr(i, "diskGiB",  data.values.AWS_NODE_OS_DISK_SIZE_GIB)

#@ tags = getattr(i, "tags",  {})
#@ taints = getattr(i, "taints",  [])

---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: #@  "{}-{}".format(data.values.CLUSTER_NAME,i.name)
  annotations:
  #@ if data.values.ENABLE_AUTOSCALER:
    cluster.k8s.io/cluster-api-autoscaler-node-group-min-size: #@ "{}".format(autoscaler_min_size)
    cluster.k8s.io/cluster-api-autoscaler-node-group-max-size: #@ "{}".format(autoscaler_max_size)
  #@ end
spec:
  clusterName: #@ data.values.CLUSTER_NAME
  replicas: #@ i.replicas
  selector:
    matchLabels: null
  template:
    metadata:
      labels: #@ merge_labels(i)
    spec:
      clusterName: #@ data.values.CLUSTER_NAME
      version: #@ data.values.KUBERNETES_VERSION
      bootstrap:
        configRef:
          name: #@ "{}-{}".format(data.values.CLUSTER_NAME,i.name)
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: #@ "{}-{}".format(data.values.CLUSTER_NAME,i.name)
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSMachineTemplate
      failureDomain: #@ i.az
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AWSMachineTemplate
metadata:
  name: #@ "{}-{}".format(data.values.CLUSTER_NAME,i.name)
spec:
  template:
    spec:
      additionalTags: #@ tags
      instanceType: #@ i.nodeMachineType
      iamInstanceProfile: "nodes.tkg.cloud.vmware.com"
      sshKeyName: #@ data.values.AWS_SSH_KEY_NAME
      ami:
        id: #@ data.values.AWS_AMI_ID
      rootVolume:
        size: #@ diskSize or 80
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: #@ "{}-{}".format(data.values.CLUSTER_NAME,i.name)
spec:
  template:
    spec:
      initConfiguration:
        nodeRegistration:
          taints: #@ taints
      joinConfiguration:
        nodeRegistration:
          name: '{{ ds.meta_data.local_hostname }}'
          kubeletExtraArgs:
            cloud-provider: aws
          taints: #@ taints

#@ end            

#@ end
